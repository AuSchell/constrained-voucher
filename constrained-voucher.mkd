---
title: Constrained Voucher Artifacts for Bootstrapping Protocols
abbrev: Constrained Vouchers
docname: draft-ietf-anima-constrained-voucher-01

# stand_alone: true

ipr: trust200902
area: Internet
wg: anima Working Group
kw: Internet-Draft
cat: std

coding: us-ascii
pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:


- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca

- ins: P. van der Stok
  name: Peter van der Stok
  org: vanderstok consultancy
  email: consultancy@vanderstok.org

- ins: P. Kampanakis
  name: Panos Kamapanakis
  org: Cisco Systems
  email: pkampana@cisco.com

normative:
  RFC2119:
  RFC7049:
  I-D.ietf-core-yang-cbor:
  I-D.ietf-core-sid:
  RFC7250:
  RFC5652:
  RFC8152:
  RFC8366:
  I-D.ietf-anima-bootstrapping-keyinfra:
  I-D.ietf-core-object-security:
  I-D.ietf-ace-cbor-web-token:
  I-D.ietf-ace-coap-est:
  ieee802-1AR:
    target: "http://standards.ieee.org/findstds/standard/802.1AR-2009.html"
    title: "IEEE 802.1AR Secure Device Identifier"
    author:
      ins: "IEEE Standard"
    date: 2009

informative:
  I-D.ietf-netmod-yang-tree-diagrams:
  pledge:
    title: "Dictionary.com Unabridged"
    target: "http://dictionary.reference.com/browse/pledge"
    author:
      -
        name: Dictionary.com
    date: 2015

  duckling:
    title: "The resurrecting duckling: security issues for ad-hoc wireless networks"
    target: "https://www.cl.cam.ac.uk/~fms27/papers/1999-StajanoAnd-duckling.pdf"
    author:
      -
        ins: F. Stajano
        name: Frank Stajano
      -
        ins: R. Anderson
        name: Ross Anderson
    date: 1999
  RFC6690:
  RFC7030:

--- abstract

This document defines a strategy to securely assign a pledge to an
owner, using an artifact signed, directly or indirectly, by the
pledge's manufacturer.  This artifact is known as a "voucher".

This document builds upon the work in {{RFC8366}}, encoding
the resulting artifact in CBOR.  Use with two signature technologies are
described.

Additionally, this document explains how constrained vouchers may be
transported in the {{I-D.ietf-ace-coap-est}} protocol.

--- middle

# Introduction

Enrollment of new nodes into constrained networks with constrained nodes
present unique challenges.

There are bandwidth and code space issues to contend.  A solution such as
{{I-D.ietf-anima-bootstrapping-keyinfra}} may be too large in terms of
code space or bandwidth required.

This document defines a constrained version of {{RFC8366}}.
Rather than serializing the YANG definition in JSON, it is serialized into
CBOR ({{RFC7049}}).

This document follows a similar, but not identical structure as
{{RFC8366}}. Some sections are left out entirely.
Additional sections have been added concerning:

1. Addition of voucher-request specification as defined in {{I-D.ietf-anima-bootstrapping-keyinfra}},
2. Addition to {{I-D.ietf-ace-coap-est}} of voucher transport requests over coap.

The CBOR definitions for this constrained voucher format are defined using
the mechanism describe in {{I-D.ietf-core-yang-cbor}} using the SID
mechanism explained in {{I-D.ietf-core-sid}}.  As the tooling to convert
YANG documents into a list of SID keys is still in its infancy, the table of
SID values presented here should be considered normative rather than the
output of the pyang tool.

Two methods of signing the resulting CBOR object are described in this
document:

1. One is CMS {{RFC5652}}.
2. The other is COSE {{RFC8152}} signatures.

# Terminology          {#Terminology}

The following terms are defined in {{RFC8366}}, and are used
identically as in that document: artifact, imprint, domain, Join
Registrar/Coordinator (JRC), Manufacturer Authorized Signing Authority
(MASA), pledge, Trust of First Use (TOFU), and Voucher.

# Requirements Language {#rfc2119}

In this document, the key words "MUST", "MUST NOT", "REQUIRED",
"SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
and "OPTIONAL" are to be interpreted as described in BCP 14, RFC 2119
{{RFC2119}} and indicate requirement levels for compliant STuPiD
implementations.

# Survey of Voucher Types

{{RFC8366}} provides for vouchers that assert proximity, that
authenticate the registrar and that include different amounts of anti-replay
protection.

This document does not make any extensions to the types of vouchers.

Time based vouchers are included in this definition, but given that
constrained devices are extremely unlikely to know the correct time, their
use is very unlikely.  Most users of these constrained vouchers will be
online and will use live nonces to provide anti-replay protection.

{{RFC8366}} defined only the voucher artifact, and not the
Voucher Request artifact, which was defined in {{I-D.ietf-anima-bootstrapping-keyinfra}}.

This document defines both a constrained voucher and a constrained voucher-request.
They are presented in the order voucher-request, followed by voucher response
as this is the time order that they occur.

# Discovery and URI

This section describes the BRSKI extensions to EST-coaps
{{I-D.ietf-ace-coap-est}} to transport the voucher between registrar,
proxy and pledge over CoAP. The extensions are targeted to low-resource 
networks with small packets. Saving header space is important and the 
EST-coaps URI is shorter than the EST URI.

The presence and location of (path to) the management data are discovered by
sending a GET request to "/.well-known/core" including a resource type (RT)
parameter with the value "ace.est" {{RFC6690}}. Upon success, the return
payload will contain the root resource of the EST resources. It is up to the
implementation to choose its root resource; throughout this document the
example root resource /est is used. The example below shows the discovery of
the presence and location of voucher resources.

~~~~
  REQ: GET /.well-known/core?rt=ace.est

  RES: 2.05 Content
  </est>; rt="ace.est"
~~~~

The EST-coaps server URIs differ from the EST URI by replacing the scheme
https by coaps and by specifying shorter resource path names:

~~~~
  coaps://www.example.com/est/short-name
~~~~

Figure 5 in section 3.2.2 of {{RFC7030}} enumerates the operations and
corresponding paths which are supported by EST. {{est-uri}} provides the
mapping from the BRSKI extension URI path to the EST-coaps URI path.

| BRSKI | EST-coaps |
| /requestvoucher| /rv |
| /voucher-status | /vs |
| /enrollstatus | /es  |
| /requestauditlog | /ra |
{: #est-uri title='BRSKI path to EST-coaps path'}

/requestvoucher and /enrollstatus are needed between pledge and Registrar.

When discovering the root path for the EST resources, the server MAY return
the full resource paths and the used content types. This is useful when
multiple content types are specified for EST-coaps server. For example, the
following more complete response is possible.

[ EDNOTE: spell out where voucher artifacts are used in
  BRSKI flows since the APIs ] 

[ EDNOTE: The /requestauditlog and /voucher-status are exchanged by the
Registrar and MASA. The JRC will likely talk to MASA over a normal
(not constrained) medium. Do we need /ra and /vs? Do we need to
remove them from the example too? Also what happens to the
voucher-request and response in this case? Is MASA supposed to
support contrained vouchers? ]  

~~~~
  REQ: GET /.well-known/core?rt=ace.est

  RES: 2.05 Content
  </est>; rt="ace.est"
  </est/rv>; rt="ace.est";ct=50 TBD2 16
  </est/vs>; rt="ace.est";ct=50
  </est/es>; rt="ace.est";ct=50
  </est/ra>; rt="ace.est";ct= TBD2 16
~~~~

The first line MUST be returned in response to the GET, The following four lines MAY be returned to show the supported Content-Formats. The return of the content-types allows the client to choose the most appropriate one from multiple content types.

ct=50 stands for the Content-Format "application/json", ct=16 stands for the
Content-Format "application/cose", and ct=TBD2 stands for Content-Format
"application/voucher-cms+cbor defined in this document.
The return of the content-types allows the client to choose the most
appropriate one from multiple content types.

# Artifacts

This section describes the abstract (tree) definition as explained
in {{I-D.ietf-netmod-yang-tree-diagrams}} first.  This provides a high-level
view of the contents of each artifact.

Then the assigned SID values are presented. These have been assigned using
the rules in {{I-D.ietf-core-yang-cbor}}, with an allocation that was made
via the http://comi.space service.

((EDNOTE: it is unclear if there is further IANA work))

## Voucher Request artifact

### Tree Diagram

<figure>
INSERT_TEXT_FROM_FILE ietf-constrained-voucher-request-tree.txt END
</figure>

### SID values

<figure>
INSERT_TEXT_FROM_FILE ietf-constrained-voucher-request-sid.txt END
</figure>

### YANG Module

In the constrained-voucher-request YANG module, the voucher is "used" and not "augmented" such that one continuous set of SID values is generated for the constrained-voucher-request module name, all voucher attributes, and the constrained-voucher-request attribute.

<figure>
INSERT_TEXT_FROM_FILE ietf-constrained-voucher-request@DATE.yang END
</figure>

### Example voucher request artifacts

TBD

## Voucher artifact

The voucher's primary purpose is to securely assign a pledge to an
owner.  The voucher informs the pledge which entity it should
consider to be its owner.

This document defines a voucher that is a CBOR encoded instance of
the YANG module defined in Section 5.3 that has been signed with CMS
or with COSE.

### Tree Diagram

<figure>
INSERT_TEXT_FROM_FILE ietf-constrained-voucher-tree.txt END
</figure>

### SID values

<figure>
INSERT_TEXT_FROM_FILE ietf-constrained-voucher-sid.txt END
</figure>

### YANG Module

In the constraine-voucher YANG module, the voucher is "used" and not "augmented" such that one continuous set of SID values is generated for the constrained-voucher module name, all voucher attributes, and the constrained-voucher attribute.

<figure>
INSERT_TEXT_FROM_FILE ietf-constrained-voucher@DATE.yang END
</figure>

### Example voucher artifacts

Below a the CBOR serialization of the the constrained-voucher and constrained-voucher-request are shown in diagnostic CBOR notation.

#### CBOR serialization of constrained-voucher

~~~~
{
  1001051: {
    +2 : "2016-10-07T19:31:42Z", / SID = 1001053, created-on /
    +4 : "2016-10-21T19:31:42Z", / SID = 1001055, expires-on /
    +1 : "verified",             / SID = 1001052, assertion /
    +11: "JADA123456789",        / SID = 1001062, serial-number /
    +5 : h'01020D0F',            / SID = 1001056, idevid-issuer /
    +8 : h'01020D0F',            / SID = 1001059, pinned-domain-cert/
    +3 : true,                   / SID = 1001054, domain-cert
                                                  -revocation-checks/
    +6 : "2017-10-07T19:31:42Z", / SID = 1001057, last-renewal-date /
    +9 : h'01020D0F'             / SID = 1001060, pinned-domain
                                          -subject-public-key-info /
  }
}
~~~~

[ EDNOTE: Add multipart blurb from M. Richardson about the public key
  sent in the voucher response https://bitbucket.org/6tisch/draft-richardson-6tisch-dtsecurity-secure-join/commits/a2c01d7800509418957f7ce05a298a753758146f
  Reference the forssati doc if it makes sense. ]

#### CBOR serialization of constrained-voucher-request

~~~~
{
  1001101: {
    +2 : "2016-10-07T19:31:42Z", / SID = 1001103, created-on /
    +4 : "2016-10-21T19:31:42Z", / SID = 1001105, expires-on /
    +1 : "verified",             / SID = 1001102, assertion /
    +11: "JADA123456789",        / SID = 1001112, serial-number /
    +5 : h'01020D0F',            / SID = 1001106, idevid-issuer /
    +8 : h'01020D0F',            / SID = 1001109, pinned-domain-cert/
    +3 : true,                   / SID = 1001104, domain-cert
                                                 -revocation-checks /
    +6 : "2017-10-07T19:31:42Z", / SID = 1001107, last-renewal-date /
    +10: h'01020D0F'             / SID = 1001111, proximity
                                -registrar-subject-public-key-info /
  }
}
~~~~

## CMS format voucher and voucher-request artifacts

The IETF evolution of PKCS#7 is CMS {{RFC5652}}.  The CMS signed voucher is
much like the equivalent voucher defined in {{RFC8366}}.

A different eContentType of TBD1 is used to indicate that the contents are
in a different format than in {{RFC8366}}.

The ContentInfo structure contains a payload consisting of the CBOR encoded
voucher. The {{I-D.ietf-core-yang-cbor}} use of delta encoding creates a
canonical ordering for the keys on the wire.  This canonical ordering is not
important as there is no expectation that the content will be reproduced
during the validation process.

Normally the recipient is the pledge and the signer is the MASA.

{{I-D.ietf-anima-bootstrapping-keyinfra}} supports both signed and unsigned
voucher requests from the pledge to the JRC.
In this specification, voucher-request artifact is not signed from the
pledge to the registrar.  [EDNOTE: Confirm that voucher requests do not 
need to be signed ] From the JRC to the MASA, the voucher-request
artifact MUST be signed by the domain owner key which is requesting
ownership.

The considerations of {{RFC5652}} section 5.1, concerning validating
CMS objects which are really PKCS7 objects (cmsVersion=1) applies.

The CMS structure SHOULD also contain all the certificates leading up
to and including the signer's trust anchor certificate known to the
recipient.  The inclusion of the trust anchor is unusual in many
applications, but without it third parties can not accurately audit
the transaction.

The CMS structure MAY also contain revocation objects for any
intermediate certificate authorities (CAs) between the voucher-issuer
and the trust anchor known to the recipient.  However, the use of
CRLs and other validity mechanisms is discouraged, as the pledge is
unlikely to be able to perform online checks, and is unlikely to have
a trusted clock source.  As described below, the use of short-lived
vouchers and/or pledge provided nonce provides a freshness guarantee.

### COSE signing

The COSE-Sign1 structure discussed in section 4.2 of [RFC8152]. The CBOR
object that carries the body, the signature, and the
information about the body and signature is called the COSE_Sign1
structure. It is used when only one signature is used on the body. The
signature algorithm is ECSDA with three curves P-256, P-384, and P-512.

Support for EdDSA is encouraged. [EDNOTE: Expand and add a reference why. ] 

Unlike with the CMS structure, the COSE-Sign1 structure does not provide
a standard way for the signing keys to be included in the structure.
This will not, in general, be a problem for the Pledge, as it the key needed
to verify the signature MUST be included at manufacturing time.

A problem arises for the Registrar, in order for it to verify the voucher, it
must have access to the MASA's public key.  This document does not specify
how to transfer the relevant key.


# Design Considerations

The design considerations for the CBOR encoding of vouchers is much the same
as for {{RFC8366}}.

One key difference is that the names of the leaves in the YANG does not have a
material effect on the size of the resulting CBOR, as the SID translation
process assigns integers to the names.

# Security Considerations

## Clock Sensitivity

TBD.

## Protect Voucher PKI in HSM

TBD.

## Test Domain Certificate Validity when Signing

TBD.

# IANA Considerations

## The IETF XML Registry

This document registers two URIs in the IETF XML registry [RFC3688].
Following the format in [RFC3688], the following registration is
requested:

      URI: urn:ietf:params:xml:ns:yang:ietf-constrained-voucher
      Registrant Contact: The ANIMA WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

      URI: urn:ietf:params:xml:ns:yang:ietf-constrained-voucher-request
      Registrant Contact: The ANIMA WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

## The YANG Module Names Registry

This document registers two YANG modules in the YANG Module Names
registry [RFC6020].  Following the format defined in [RFC6020], the
the following registration is requested:

      name:         ietf-constrained-voucher
      namespace:    urn:ietf:params:xml:ns:yang:ietf-constrained-voucher
      prefix:       vch
      reference:    RFC XXXX

      name:         ietf-constrained-voucher-request
      namespace:    urn:ietf:params:xml:ns:yang:ietf-constrained
                                               -voucher-request
      prefix:       vch
      reference:    RFC XXXX

## The SMI Security for S/MIME CMS Content Type Registry

This document registers an OID in the "SMI Security for S/MIME CMS
Content Type" registry (1.2.840.113549.1.9.16.1), with the value:

      Decimal  Description                             References
      -------  --------------------------------------  ----------
      TBD1      id-ct-animaCBORVoucher                 [ThisRFC]

EDNOTE: should a separate value be used for Voucher Requests?

## The SID registry

The SID range 1001100 was allocated by comi.space to the
IETF-CONSTRAINED-VOUCHER yang module.

The SID range 1001150 was allocated by comi.space to the
IETF-CONSTRAINED-VOUCHER-REQUEST yang module.

EDNOTE: it is unclear if there is further IANA work required.

## Media-Type Registry

This section registers the 'application/voucher-cms+cbor' media type and the 'application/voucher-cose+cbor'in the
"Media Types" registry.  These media types are used to indicate that
the content is a CBOR voucher either signed with a cms structure or a COSE_Sign1 structure [RFC8152].

### application/voucher-cms+cbor

    Type name:  application
    Subtype name:  voucher-cms+cbor
    Required parameters:  none
    Optional parameters:  none
    Encoding considerations:  CMS-signed CBOR vouchers are CBOR
      encoded.
    Security considerations:  See Security Considerations, Section
    Interoperability considerations:  The format is designed to be
      broadly interoperable.
    Published specification:  THIS RFC.
    Applications that use this media type:  ANIMA, 6tisch, and other
      zero-touch imprinting systems
    Additional information:
      Magic number(s):  None
      File extension(s):  .vch
      Macintosh file type code(s):  none
    Person & email address to contact for further information:  IETF
      ANIMA WG
    Intended usage:  LIMITED
    Restrictions on usage:  NONE
    Author:  ANIMA WG
    Change controller:  IETF
    Provisional registration? (standards tree only):  NO

### application/voucher-cose+cbor

    Type name:  application
    Subtype name:  voucher-cose+cbor
    Required parameters:  none
    Optional parameters:  cose-type
    Encoding considerations:  COSE_Sign1 CBOR vouchers are COSE objects
                              signed with one signer.
    Security considerations:  See Security Considerations, Section
    Interoperability considerations:  The format is designed to be
      broadly interoperable.
    Published specification:  THIS RFC.
    Applications that use this media type:  ANIMA, 6tisch, and other
      zero-touch imprinting systems
    Additional information:
      Magic number(s):  None
      File extension(s):  .vch
      Macintosh file type code(s):  none
    Person & email address to contact for further information:  IETF
      ANIMA WG
    Intended usage:  LIMITED
    Restrictions on usage:  NONE
    Author:  ANIMA WG
    Change controller:  IETF
    Provisional registration? (standards tree only):  NO

## CoAP Content-Format Registry

Additions to the sub-registry "CoAP Content-Formats", within the "CoRE
Parameters" registry are needed for two media types. These can be registered
either in the Expert Review range (0-255) or IETF Review range (256-9999).

    Media type                     mime type     Encoding   ID     References
    ----------------------------   -----------   ---------  -----  ----------
    application/voucher-cms+cbor      - -        CBOR       TBD2   [This RFC]
    application/voucher-cose+cbor  "COSE-Sign1"  CBOR       TBD3   [This RFC]


# Acknowledgements

We are very grateful to Jim Schaad for explaining COSE and CMS choices.

Michel Veillette did extensive work on pyang to extend it to support the
SID allocation process, and this document was among the first users.

# Changelog

-03

    Cms and cose mediatypes are introduced

--- back

#EST messages to EST-coaps

This section extends the examples from Appendix A of {{I-D.ietf-ace-coap-est}}. The CoAP headers are only worked out for the enrollstatus example.

##enrollstatus

A coaps enrollstatus message can be :

~~~~
    GET coaps://[192.0.2.1:8085]/est/es
~~~~

The corresponding coap header fields are shown below.

~~~~
  Ver = 1
  T = 0 (CON)
  Code = 0x01 (0.01 is GET)
  Options
   Option1 (Uri-Host)
     Option Delta = 0x3  (option nr = 3)
     Option Length = 0x9
     Option Value = 192.0.2.1
   Option2 (Uri-Port)
     Option Delta = 0x4  (option nr = 4+3=7)
     Option Length = 0x4
     Option Value = 8085
   Option3 (Uri-Path)
     Option Delta = 0x4   (option nr = 7+4= 11)
     Option Length = 0x7
     Option Value = /est/es
  Payload = [Empty]
~~~~

A 2.05 Content response with an unsigned JSON voucher (ct=50) will then be:

~~~~
   2.05 Content (Content-Format: application/json)
     {payload}
~~~~

With CoAP fields and payload:

~~~~
   Ver=1
   T=2 (ACK)
   Code = 0x45 (2.05 Content)
   Options
     Option1 (Content-Format)
     Option Delta = 0xC  (option nr 12)
     Option Length = 0x2
     Option Value = 0x32 (application/json)

     Payload =
    [EDNOTE: put here voucher payload ]
~~~~

##voucher_status

A coaps voucher_status message can be :

~~~~
   GET coaps://[2001:db8::2:1]:61616]/est/vs
~~~~

A 2.05 Content response with a non signed JSON voucher (ct=50) will then be:

~~~~
    2.05 Content (Content-Format: application/json)
    Payload =
    [EDNOTE: put here voucher payload ]
~~~~

##requestvoucher

A coaps requestvoucher message can be :

~~~~
    GET coaps://[2001:db8::2:1]:61616]/est/rv
~~~~

A 2.05 Content response returning CBOR voucher signed with a cms structure(ct=TBD2) will then be:

~~~~
    2.05 Content (Content-Format: application/voucher-cms+cbor)
    Payload =
    [EDNOTE: put here encrypted voucher payload ]
~~~~


##requestauditing

A coaps requestauditing message can be :

~~~~
    GET coaps://[2001:db8::2:1]:61616]/est/ra
~~~~

A 2.05 Content response returning a COSE_Sign1 object (ct=TBD3) will then be:

~~~~
    2.05 Content (Content-Format: application/voucher-cose+cbor)
    Payload =
    [EDNOTE: put here COSE_Sign1 voucher payload ]
~~~~
