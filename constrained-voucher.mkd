---
title: Constrained Voucher Artifacts for Bootstrapping Protocols
abbrev: Constrained Voucher
docname: draft-ietf-anima-constrained-voucher-09

# stand_alone: true

ipr: trust200902
area: Internet
wg: anima Working Group
kw: Internet-Draft
cat: std

pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:

- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca

- ins: P. van der Stok
  name: Peter van der Stok
  org: vanderstok consultancy
  email: consultancy@vanderstok.org

- ins: P. Kampanakis
  name: Panos Kampanakis
  org: Cisco Systems
  email: pkampana@cisco.com

normative:
#  RFC2119:
  RFC7049:
  I-D.ietf-core-yang-cbor:
  I-D.ietf-core-sid:
#  RFC7250:
#  RFC7252:
  RFC7950:
  RFC5652:
  RFC8152:
#  RFC8174:
  RFC8366:
  RFC3688:
  RFC6020:
  I-D.ietf-anima-bootstrapping-keyinfra:
#  I-D.ietf-core-object-security:
#  I-D.ietf-ace-cbor-web-token:
  I-D.ietf-ace-coap-est:
#  ieee802-1AR:
#    target: "http://standards.ieee.org/findstds/standard/802.1AR-2009.html"
#    title: "IEEE 802.1AR Secure Device Identifier"
#    author:
#      ins: "IEEE Standard"
#    date: 2009

informative:
  I-D.ietf-netmod-yang-tree-diagrams:
#  pledge:
#    title: "Dictionary.com Unabridged"
#    target: "http://dictionary.reference.com/browse/pledge"
#    author:
#      -
#        name: Dictionary.com
#    date: 2015

#  duckling:
#    title: "The resurrecting duckling: security issues for ad-hoc wireless networks"
#    target: "https://www.cl.cam.ac.uk/~fms27/papers/1999-StajanoAnd-duckling.pdf"
#    author:
#      -
#        ins: F. Stajano
#        name: Frank Stajano
#      -
#        ins: R. Anderson
#        name: Ross Anderson
#    date: 1999

  COSE-registry:
    title: "CBOR Object Signing and Encryption (COSE) registry"
    target: "https://www.iana.org/assignments/cose/cose.xhtml"
    author:
      ins: "IANA"
    date: 2017
  RFC6690:
  RFC7030:

--- abstract

This document defines a strategy to securely assign a pledge to an
owner, using an artifact signed, directly or indirectly, by the
pledge's manufacturer.  This artifact is known as a "voucher".

This document builds upon the work in {{RFC8366}}, encoding
the resulting artifact in CBOR.  Use with two signature technologies are
described.

Additionally, this document explains how constrained vouchers may be
transported as an extension to the {{I-D.ietf-ace-coap-est}} protocol.

--- middle

# Introduction

Enrollment of new nodes into constrained networks with constrained nodes
present unique challenges.

There are bandwidth and code space issues to contend.
A solution such as {{I-D.ietf-anima-bootstrapping-keyinfra}} may be too large in terms of
code space or bandwidth required.

This document defines a constrained version of {{RFC8366}}.
Rather than serializing the YANG definition in JSON, it is serialized into CBOR ({{RFC7049}}).

This document follows a similar, but not identical structure as {{RFC8366}} and supplements the brski part to {{I-D.ietf-ace-coap-est}}.

This document describes a single new voucher format.
It is a COSE-signed CBOR-encoded vouchers transported using CoAP.
The CoAP connection is protected either by OSCORE+EDHOC, or DTLS (CoAPS).

There is additional work where the voucher is integrated into the key-exchange, described in {{!I-D.selander-ace-ake-authz}}.
This work is not in scope for this document.

Additional sections have been added concerning:

1. Addition of voucher-request specification as defined in {{I-D.ietf-anima-bootstrapping-keyinfra}},
2. Addition to {{I-D.ietf-ace-coap-est}} of voucher transport requests over CoAP.

The CBOR definitions for this constrained voucher format are defined using the mechanism describe in {{I-D.ietf-core-yang-cbor}} using the SID mechanism explained in {{I-D.ietf-core-sid}}.
As the tooling to convert YANG documents into an list of SID keys is still in its infancy, the table of SID values presented here should be considered normative rather than the output of the pyang tool.

# Terminology          {#Terminology}

The following terms are defined in {{RFC8366}}, and are used
identically as in that document: artifact, imprint, domain, Join
Registrar/Coordinator (JRC), Manufacturer Authorized Signing Authority
(MASA), pledge, Trust of First Use (TOFU), and Voucher.

# Requirements Language {#reqlang}

{::boilerplate bcp14}

# Survey of Voucher Types

{{RFC8366}} provides for vouchers that assert proximity, that authenticate the registrar  and that include different amounts of anti-replay protection.

This document does not make any extensions to the types of vouchers.

Time based vouchers are included in this definition, but given that constrained devices  are extremely unlikely to have accurate time, their use is very unlikely.
Most users of these constrained vouchers will be online and will use live nonces to provide anti-replay protection.

{{RFC8366}} defined only the voucher artifact, and not the Voucher Request artifact, which was defined in {{I-D.ietf-anima-bootstrapping-keyinfra}}.

This document defines both a constrained voucher and a constrained voucher-request.
They are presented in the order "voucher-request", followed by a "voucher" response as this is the time order that they occur.

The pinned-domain-cert present in a voucher, is the certificate of the Registrar.

The constrained voucher and constrained voucher request MUST be signed.

The use of the two signing formats permit the use of both PKIX format certificates, and raw public keys (RPK).

When RPKs are used, the voucher produced by the MASA pins the raw public key of the Registrar: the pinned-domain-subject-public-key-info in a voucher, is the raw public
key of the Registrar.
This is described in the YANG definition for the constrained voucher.

# Discovery and URI

This section describes the BRSKI extensions to EST-coaps {{I-D.ietf-ace-coap-est}} to transport the voucher between registrar, proxy and pledge over CoAP.
The extensions are targeted to low-resource networks with small packets.
Saving header space is important and the EST-coaps URI is shorter than the EST URI.

The presence and location of (path to) the management data are discovered by sending a GET request to "/.well-known/core" including a resource type (RT) parameter with the value "ace.est" {{RFC6690}}.
Upon success, the return payload will contain the root resource of the EST resources.
It is up to the implementation to choose its root resource; throughout this document the
example root resource /est is used.

The EST-coaps server URIs differ from the EST URI by replacing the scheme https by coaps and by specifying shorter resource path names:

~~~~
  coaps://www.example.com/est/short-name
~~~~

Figure 5 in section 3.2.2 of {{RFC7030}} enumerates the operations and corresponding paths which are supported by EST.
{{est-uri}} provides the mapping from the BRSKI extension URI path to the EST-coaps URI path.

| BRSKI | EST-coaps |
| /requestvoucher| /rv |
| /voucher_status | /vs |
| /enrollstatus | /es  |
| /requestauditlog | /ra |
{: #est-uri title='BRSKI path to EST-coaps path'}

/requestvoucher, /voucher_status and /enrollstatus are needed between
pledge and Registrar.

When discovering the root path for the EST resources, the server MAY return
the full resource paths and the used content types. This is useful when
multiple content types are specified for EST-coaps server. For example, the
following more complete response is possible.

[ EDNOTE: spell out where voucher artifacts are used in
  BRSKI flows since the APIs ]

[ EDNOTE: The /requestauditlog and /voucher-status are exchanged by the
Registrar and MASA. The JRC will likely talk to MASA over a normal
(not constrained) medium. Do we need /ra and /vs? Do we need to
remove them from the example too? Also what happens to the
voucher-request and response in this case? Is MASA supposed to
support contrained vouchers? ]

~~~~
  REQ: GET /.well-known/core?rt=brski*

  RES: 2.05 Content
  </b>; rt="brski"
  </b/rv>; rt="brski.rv";ct=TBD2 TBD3
  </b/vs>; rt="brski.vs";ct=50 60
  </b/es>; rt="brski.es";ct=50 60
~~~~

The return of the content-types allows the client to choose the most appropriate one from multiple content types.

ct=TBD2 stands for Content-Format "application/voucher-cms+cbor,
and ct=TBD3 stands for Content-Format "application/voucher-cose+cbor".

Content-Formats TBD2 and TBD3 are defined in this document.

The Content-Format ("application/json") 50 MAY be supported.
Content-Formats ("application/cbor") 60, TBD2, and TBD3 MUST be supported by the Registrar.

The Pledge and MASA need to support one or more formats for the voucher.
The MASA needds to support whatever formats that the pledge's produced by that manufacturer supports.

# Artifacts

This section describes the abstract (tree) definition as explained
in {{I-D.ietf-netmod-yang-tree-diagrams}} first.  This provides a high-level
view of the contents of each artifact.

Then the assigned SID values are presented. These have been assigned using
the rules in {{I-D.ietf-core-sid}}, with an allocation that was made
via the http://comi.space service.

## Voucher Request artifact

### Tree Diagram

The following diagram is largely a duplicate of the contents of {{RFC8366}},
with the addition of proximity-registrar-subject-public-key-info,
proximity-registrar-cert, and prior-signed-voucher-request.

prior-signed-voucher-request is only used between the Registrar and the MASA.
proximity-registrar-subject-public-key-info replaces proximity-registrar-cert
for the extremely constrained cases.

INSERT_FIG_FROM_FILE ietf-constrained-voucher-request-tree.txt END

### SID values

INSERT_FIG_FROM_FILE ietf-constrained-voucher-request-sid.txt END

### YANG Module

In the constrained-voucher-request YANG module, the voucher is "augmented" within the "used" grouping statement such that one continuous set of SID values is generated for the constrained-voucher-request module name, all voucher attributes, and the constrained-voucher-request attribute. Two attributes of the voucher are "refined" to be optional.

INSERT_FIG_FROM_FILE ietf-constrained-voucher-request@DATE.yang END

### Example voucher request artifact {#example2}

Below is a CBOR serialization of the constrained-voucher-request is shown in diagnostic CBOR notation. The enum value of the assertion field is calculated to be zero by following the algorithm described in section 9.6.4.2 of {{RFC7950}}.

INSERT_FIG_FROM_FILE examples/voucher-request-example1.txt END

## Voucher artifact

The voucher's primary purpose is to securely assign a pledge to an
owner.  The voucher informs the pledge which entity it should
consider to be its owner.

This document defines a voucher that is a CBOR encoded instance of
the YANG module defined in Section 5.3 that has been signed with CMS
or with COSE.

### Tree Diagram

The following diagram is largely a duplicate of the contents of {{RFC8366}},
with only the addition of pinned-domain-subject-public-key-info.

INSERT_FIG_FROM_FILE ietf-constrained-voucher-tree.txt END

### SID values

INSERT_FIG_FROM_FILE ietf-constrained-voucher-sid.txt END


### YANG Module

In the constrained-voucher YANG module, the voucher is "augmented" within the "used" grouping statement such that one continuous set of SID values is generated for the constrained-voucher module name, all voucher attributes, and the constrained-voucher attribute.
Two attributes of the voucher are "refined" to be optional.

INSERT_FIG_FROM_FILE ietf-constrained-voucher@DATE.yang END

### Example voucher artifacts {#example1}

Below a the CBOR serialization of the constrained-voucher is shown in diagnostic CBOR notation.
The enum value of the assertion field is calculated to be zero by following the algorithm described in section 9.6.4.2 of {{RFC7950}}.

INSERT_FIG_FROM_FILE examples/voucher-example1.txt END

## Signing voucher and voucher-request artifacts with COSE

The COSE-Sign1 structure is discussed in section 4.2 of {{RFC8152}}.
The CBOR object that carries the body, the signature, and the information about the body  and signature is called the COSE_Sign1 structure.
It is used when only one signature is used on the body.
Support for ECDSA with sha256 (secp256k1 and prime256v1 curves) is compulsory.

The supported COSE-sign1 object stucture is shown in {{fig-cose}}.
Support for EdDSA is encouraged. [EDNOTE: Expand and add a reference why. ]

~~~~
COSE_Sign1(
  [
    h'A101382E',        # { "alg": EC256K1 }
    {
      “kid” : h'789'  # hash256(public key)
    },
    h'123', #voucher-request binary content
    h'456', #voucher-request binary public signature
  ]
)
~~~~
{: #fig-cose title='cose-sign1 example' align="left"}

The {{COSE-registry}} specifies the integers that replace the strings and the mnemonics in {{fig-cose}}.
The value of the "kid" parameter is an example value.
Usually a hash of the public key is used to idientify the public key.
The public key and its hash are derived from the relevant certificate (Pledge, Registrar or MASA certificate).

In {{cosesign}} a binary cose-sign1 object is shown based on the voucher-request example of {{example2}}.

# Design Considerations

The design considerations for the CBOR encoding of vouchers is much the same as for {{RFC8366}}.

One key difference is that the names of the leaves in the YANG does not have a material effect on the size of the resulting CBOR, as the SID translation process assigns integers to the names.

# Security Considerations

## Clock Sensitivity

TBD.

## Protect Voucher PKI in HSM

TBD.

## Test Domain Certificate Validity when Signing

TBD.

# IANA Considerations

## Resource Type Registry

Additions to the sub-registry "CoAP Resource Type", within the "CoRE parameters" registry are specified below.
These can be registered  either in the Expert Review range (0-255) or IETF Review range (256-9999).

     ace.rt.rv needs registration with IANA
     ace.rt.vs needs registration with IANA
     ace.rt.es needs registration with IANA
     ace.rt.ra needs registration with IANA

## The IETF XML Registry

This document registers two URIs in the IETF XML registry {{RFC3688}}.
Following the format in {{RFC3688}}, the following registration is requested:

      URI: urn:ietf:params:xml:ns:yang:ietf-constrained-voucher
      Registrant Contact: The ANIMA WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

      URI: urn:ietf:params:xml:ns:yang:ietf-constrained-voucher-request
      Registrant Contact: The ANIMA WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

## The YANG Module Names Registry

This document registers two YANG modules in the YANG Module Names registry {{RFC6020}}.  Following the format defined in {{RFC6020}}, the the following registration is requested:

      name:         ietf-constrained-voucher
      namespace:    urn:ietf:params:xml:ns:yang:ietf-constrained-voucher
      prefix:       vch
      reference:    RFC XXXX

      name:         ietf-constrained-voucher-request
      namespace:    urn:ietf:params:xml:ns:yang:ietf-constrained
                                               -voucher-request
      prefix:       vch
      reference:    RFC XXXX

## The RFC SID range assignment sub-registry

    ------------ ------ --------------------------- ------------
    Entry-point | Size | Module name               | RFC Number
    ------------ ------ --------------------------- ------------
    2450          50     ietf-constrained-voucher    [ThisRFC]
    2500          50     ietf-constrained-voucher    [ThisRFC}
                                     -request
    ----------- ------  --------------------------- ------------

Warning: These SID values are defined in {{I-D.ietf-core-sid}}, not as an Early Allocation.

## The SMI Security for S/MIME CMS Content Type Registry

This document registers an OID in the "SMI Security for S/MIME CMS Content Type" registry (1.2.840.113549.1.9.16.1), with the value:

      Decimal  Description                             References
      -------  --------------------------------------  ----------
      46       id-ct-animaCBORVoucher                  [ThisRFC]


<!-- per IANA #1160164 -->


## Media-Type Registry

This section registers the 'application/voucher-cms+cbor' media type and the 'application/voucher-cose+cbor' in the "Media Types" registry.
These media types are used to indicate that the content is a CBOR voucher either signed with a cms structure or a COSE_Sign1 structure {{RFC8152}}.

### application/voucher-cms+cbor

    Type name:  application
    Subtype name:  voucher-cms+cbor
    Required parameters:  none
    Optional parameters:  none
    Encoding considerations:  CMS-signed CBOR vouchers are CBOR
      encoded.
    Security considerations:  See Security Considerations, Section
    Interoperability considerations:  The format is designed to be
      broadly interoperable.
    Published specification:  THIS RFC.
    Applications that use this media type:  ANIMA, 6tisch, and other
      zero-touch imprinting systems
    Additional information:
      Magic number(s):  None
      File extension(s):  .vch
      Macintosh file type code(s):  none
    Person & email address to contact for further information:  IETF
      ANIMA WG
    Intended usage:  LIMITED
    Restrictions on usage:  NONE
    Author:  ANIMA WG
    Change controller:  IETF
    Provisional registration? (standards tree only):  NO

### application/voucher-cose+cbor

    Type name:  application
    Subtype name:  voucher-cose+cbor
    Required parameters:  none
    Optional parameters:  cose-type
    Encoding considerations:  COSE_Sign1 CBOR vouchers are COSE objects
                              signed with one signer.
    Security considerations:  See Security Considerations, Section
    Interoperability considerations:  The format is designed to be
      broadly interoperable.
    Published specification:  THIS RFC.
    Applications that use this media type:  ANIMA, 6tisch, and other
      zero-touch imprinting systems
    Additional information:
      Magic number(s):  None
      File extension(s):  .vch
      Macintosh file type code(s):  none
    Person & email address to contact for further information:  IETF
      ANIMA WG
    Intended usage:  LIMITED
    Restrictions on usage:  NONE
    Author:  ANIMA WG
    Change controller:  IETF
    Provisional registration? (standards tree only):  NO

## CoAP Content-Format Registry

Additions to the sub-registry "CoAP Content-Formats", within the "CoRE
Parameters" registry are needed for two media types. These can be registered
either in the Expert Review range (0-255) or IETF Review range (256-9999).

    Media type                    mime type    Encoding   ID  References
    ----------------------------  -----------  --------- ---- ----------
    application/voucher-cms+cbor      - -        CBOR    TBD2  [This RFC]
    application/voucher-cose+cbor "COSE-Sign1"   CBOR    TBD3  [This RFC]


# Acknowledgements

We are very grateful to Jim Schaad for explaining COSE and CMS choices.
Also thanks to Jim Schaad for correctinging earlier version of the COSE Sign1 objects.

Michel Veillette did extensive work on pyang to extend it to support the SID allocation process, and this document was among the first users.

We are grateful for the suggestions done by Esko Dijk.

# Changelog

-08
    Examples for cose_sign1 are completed and improved.

-06
    New SID values assigned; regenerated examples

-04
    voucher and request-voucher MUST be signed
    examples for signed request are added in appendix
    IANA SID registration is updated
    SID values in examples are aligned
    signed cms examples aligned with new SIDs

-03

    Examples are inverted.

-02

    Example of requestvoucher with unsigned appllication/cbor is added
    attributes of voucher "refined" to optional
    CBOR serialization of vouchers improved
    Discovery port numbers are specified

-01

    application/json is optional, application/cbor is compulsory
    Cms and cose mediatypes are introduced

--- back

#EST messages to EST-coaps

This section extends the examples from Appendix A of {{I-D.ietf-ace-coap-est}}. The CoAP headers are only worked out for the enrollstatus example.

##enrollstatus {#es}

A coaps enrollstatus message can be :

~~~
    GET coaps://[192.0.2.1:8085]/est/es
~~~

The corresponding coap header fields are shown below.

~~~
  Ver = 1
  T = 0 (CON)
  Code = 0x01 (0.01 is GET)
  Options
   Option  (Uri-Path)
     Option Delta = 0xb   (option nr = 11)
     Option Length = 0x3
     Option Value = "est"
   Option  (Uri-Path)
     Option Delta = 0x0   (option nr = 11)
     Option Length = 0x2
     Option Value = "es"
  Payload = [Empty]
~~~

The Uri-Host and Uri-Port Options are omitted because they coincide with the transport protocol destination address and port respectively.

A 2.05 Content response with an unsigned voucher status (ct=60) will then be:

~~~
   2.05 Content (Content-Format: application/cbor)
~~~

With CoAP fields and payload:

~~~
   Ver=1
   T=2 (ACK)
   Code = 0x45 (2.05 Content)
   Options
     Option1 (Content-Format)
     Option Delta = 0xC  (option nr 12)
     Option Length = 0x2
     Option Value = 60 (application/cbor)

     Payload (CBOR diagnostic) =
     {
     "version":"1",
     "Status": 1,   / 1 = Success, 0 = Fail  /
     "Reason":"Informative human readable message",
     "reason-context": "Additional information"
     }
~~~

 The binary payload is:

~~~
     A46776657273696F6E6131665374617475730166526561736F6E7822
     496E666F726D61746976652068756D616E207265616461626C65206D
     6573736167656e726561736F6E2D636F6E74657874
     764164646974696F6E616C20696E666F726D6174696F6E
~~~

The binary payload disassembles to the above CBOR diagnostic code.

##voucher_status

A coaps voucher_status message can be:

~~~~
   POST coaps://[2001:db8::2:1]:61616]/est/vs
~~~~

A 2.05 Content response with a non signed CBOR voucher status (ct=60) will then be:

~~~~
    2.05 Content (Content-Format: application/cbor)
    Payload =
INSERT_TEXT_FROM_FILE examples/voucher_status.hex END
~~~~

The payload above is represented in hexadecimal.

~~~~
INSERT_TEXT_FROM_FILE examples/voucher_status.diag END
~~~~

#CMS signed messages

Signed request-voucher-request payloads are sent from pledge to Registrar, as explained in Section 5.2 of {{I-D.ietf-anima-bootstrapping-keyinfra}}.

## signed requestvoucher {#rv}

A CMS signed requestvoucher message from JRC to MASA is shown below.
It would be CoAP POSTED to /est/rv.

~~~~
    POST coaps://[2001:db8::2:1]:61616]/est/rv
    (Content-Format: application/voucher-cms+cbor)
~~~~

The payload would be in binary, but is presented in base64 in this document.

INSERT_FIG_FROM_FILE examples/cms-parboiled-request.b64 END

A 2.04 Changed response returning CBOR voucher signed with a cms structure(ct=TBD2) will then be:

~~~~
    2.04 Changed (Content-Format: application/voucher-cms+cbor)
~~~~
INSERT_FIG_FROM_FILE examples/cms-voucher2.b64 END

# COSE examples {#cosesign}

These examples are generated on a pie 4 and a PC running BASH. Keys and Certificates have been generated with openssl with the following shell script:

INSERT_FIG_FROM_FILE examples/brski-cert.sh END

The xxxx-comb certificates have been generated as required by libcoap for the DTLS connection generation.

## Pledge, Registrar and MASA keys

This first section documents the public and private keys used in the
subsequent test vectors below.  These keys come from test code and are not used in any
production system, and should only be used only to validate implementations.

### Pledge private key

INSERT_FIG_FROM_FILE examples/pledge-key.txt END

### Registrar private key {#jrcpriv}

INSERT_FIG_FROM_FILE examples/registrar-key.txt END

### MASA private key {#masapriv}

INSERT_FIG_FROM_FILE examples/masa-key.txt END

## Pledge, Registrar and MASA certificates

Below the certificates that accompany the keys. The certificate description is followed by the hexadecimal DER of the certificate

### Pledge IDevID certificate

INSERT_FIG_FROM_FILE examples/pledge-cert.txt END

This is the hexadecimal representation in (request-)voucher examples referred to as pledge-cert-hex.

INSERT_FIG_FROM_FILE examples/pledge-cert.hex END

### Registrar Certificate

INSERT_FIG_FROM_FILE examples/registrar-cert.txt END

This the hexadecimal representation, in (request-)voucher examples referred to as regis-cert-hex

INSERT_FIG_FROM_FILE examples/registrar-cert.hex END

### MASA Certificate

INSERT_FIG_FROM_FILE examples/masa-cert.txt END

This is the hexadecimal representation, in (request-)voucher examples referred to as masa-cert-hex.

INSERT_FIG_FROM_FILE examples/masa-cert.hex END


## COSE signed voucher request from pledge to Registrar

In this example the voucher request has been signed by the pledge, and has been sent to the JRC over CoAPS.  This example
uses the proximity-registrar-cert mechanism to request a voucher that
pins the certificate of the registrar.

~~~
    POST coaps://registrar.example.com/est/rv
    (Content-Format: application/voucher-cose+cbor)
    signed_request_voucher
~~~

The payload signed_request_voucher is shown as hexadecimal dump (with lf added):

INSERT_FIG_FROM_FILE examples/pledge-to-regis.txt END

The representiation of signed_voucher_request in CBOR diagnostic format is:

INSERT_FIG_FROM_FILE examples/pledge-to-regisdiag.txt END


## COSE signed voucher request from Registrar to MASA

In this example the voucher request has been signed by the JRC using the private key from
{{jrcpriv}}.  Contained within this voucher request is the voucher
request from the pledge to JRC.


~~~
    POST coaps://masa.example.com/est/rv
    (Content-Format: application/voucher-cose+cbor)
    signed_masa_request_voucher
~~~


The payload signed_masa_voucher_request is shown as hexadecimal dump (with lf added):

INSERT_FIG_FROM_FILE examples/regis-to-MASA.txt END

The representiation of signed_masa_voucher_request in CBOR diagnostic format is:

INSERT_FIG_FROM_FILE examples/regis-to-MASA-diag.txt END

## COSE signed voucher from MASA to Pledge via Registrar

The resulting voucher is created by the MASA and returned via the JRC to the
Pledge.  It is signed by the MASA's private key {{masapriv}} and can be
verified by the pledge using the MASA's public key contained within the MASA certificate.

This is the raw binary signed_voucher, encoded in hexadecimal (with lf added):

INSERT_FIG_FROM_FILE examples/voucher-from-MASA.txt END

The representiation of signed_voucher in CBOR diagnostic format is:

INSERT_FIG_FROM_FILE examples/voucher-from-MASA-diag.txt END
