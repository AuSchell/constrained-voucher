---
title: Constrained Voucher Artifacts for Bootstrapping Protocols
abbrev: Constrained Voucher
docname: draft-ietf-anima-constrained-voucher-06

# stand_alone: true

ipr: trust200902
area: Internet
wg: anima Working Group
kw: Internet-Draft
cat: std

coding: us-ascii
pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:


- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca

- ins: P. van der Stok
  name: Peter van der Stok
  org: vanderstok consultancy
  email: consultancy@vanderstok.org

- ins: P. Kampanakis
  name: Panos Kampanakis
  org: Cisco Systems
  email: pkampana@cisco.com

normative:
  RFC2119:
  RFC7049:
  I-D.ietf-core-yang-cbor:
  I-D.ietf-core-sid:
#  RFC7250:
#  RFC7252:
  RFC7950:
  RFC5652:
  RFC8152:
  RFC8174:
  RFC8366:
  RFC3688:
  RFC6020:
  I-D.ietf-anima-bootstrapping-keyinfra:
#  I-D.ietf-core-object-security:
#  I-D.ietf-ace-cbor-web-token:
  I-D.ietf-ace-coap-est:
#  ieee802-1AR:
#    target: "http://standards.ieee.org/findstds/standard/802.1AR-2009.html"
#    title: "IEEE 802.1AR Secure Device Identifier"
#    author:
#      ins: "IEEE Standard"
#    date: 2009

informative:
  I-D.ietf-netmod-yang-tree-diagrams:
#  pledge:
#    title: "Dictionary.com Unabridged"
#    target: "http://dictionary.reference.com/browse/pledge"
#    author:
#      -
#        name: Dictionary.com
#    date: 2015

#  duckling:
#    title: "The resurrecting duckling: security issues for ad-hoc wireless networks"
#    target: "https://www.cl.cam.ac.uk/~fms27/papers/1999-StajanoAnd-duckling.pdf"
#    author:
#      -
#        ins: F. Stajano
#        name: Frank Stajano
#      -
#        ins: R. Anderson
#        name: Ross Anderson
#    date: 1999

  COSE-registry:
    title: "CBOR Object Signing and Encryption (COSE) registry"
    target: "https://www.iana.org/assignments/cose/cose.xhtml"
    author:
      ins: "IANA"
    date: 2017
  RFC6690:
  RFC7030:

--- abstract

This document defines a strategy to securely assign a pledge to an
owner, using an artifact signed, directly or indirectly, by the
pledge's manufacturer.  This artifact is known as a "voucher".

This document builds upon the work in {{RFC8366}}, encoding
the resulting artifact in CBOR.  Use with two signature technologies are
described.

Additionally, this document explains how constrained vouchers may be
transported as an extension to the {{I-D.ietf-ace-coap-est}} protocol.

--- middle

# Introduction

Enrollment of new nodes into constrained networks with constrained nodes
present unique challenges.

There are bandwidth and code space issues to contend.  A solution such as
{{I-D.ietf-anima-bootstrapping-keyinfra}} may be too large in terms of
code space or bandwidth required.

This document defines a constrained version of {{RFC8366}}.
Rather than serializing the YANG definition in JSON, it is serialized into
CBOR ({{RFC7049}}).

This document follows a similar, but not identical structure as
{{RFC8366}}. Some sections are left out entirely.
Additional sections have been added concerning:

1. Addition of voucher-request specification as defined in {{I-D.ietf-anima-bootstrapping-keyinfra}},
2. Addition to {{I-D.ietf-ace-coap-est}} of voucher transport requests over CoAP.

The CBOR definitions for this constrained voucher format are defined using
the mechanism describe in {{I-D.ietf-core-yang-cbor}} using the SID
mechanism explained in {{I-D.ietf-core-sid}}.  As the tooling to convert
YANG documents into an list of SID keys is still in its infancy, the table of
SID values presented here should be considered normative rather than the
output of the pyang tool.

Two methods of signing the resulting CBOR object are described in this
document:

1. One is CMS {{RFC5652}}.
2. The other is COSE_Sign1 {{RFC8152}} objects.

# Terminology          {#Terminology}

The following terms are defined in {{RFC8366}}, and are used
identically as in that document: artifact, imprint, domain, Join
Registrar/Coordinator (JRC), Manufacturer Authorized Signing Authority
(MASA), pledge, Trust of First Use (TOFU), and Voucher.

# Requirements Language {#reqlang}

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL 
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", 
"MAY", and "OPTIONAL" in this document are to be interpreted as 
described in BCP 14 {{RFC2119}} {{RFC8174}} when, and only when, they 
appear in all capitals, as shown here.

# Survey of Voucher Types

{{RFC8366}} provides for vouchers that assert proximity, that
authenticate the registrar and that include different amounts of anti-replay
protection.

This document does not make any extensions to the types of vouchers.

Time based vouchers are included in this definition, but given that
constrained devices are extremely unlikely to have accurate time, their
use is very unlikely.  Most users of these constrained vouchers will be
online and will use live nonces to provide anti-replay protection.

{{RFC8366}} defined only the voucher artifact, and not the
Voucher Request artifact, which was defined in {{I-D.ietf-anima-bootstrapping-keyinfra}}.

This document defines both a constrained voucher and a constrained voucher-request.
They are presented in the order voucher-request, followed by a voucher response
as this is the time order that they occur.

This document defines both CMS-signed voucher requests and responses, and
COSE signed voucher requests and responses.
The use of CMS signatures implies the use of PKIX format certificates.
The pinned-domain-cert present in such a voucher, is the certificate of the Registrar.

The constrained voucher and constrained voucher request MUST be signed.

The use of the two signing formats permit the use of both PKIX format certificates,
and raw public keys (RPK).  When RPKs are used, the voucher produced by
the MASA pins the raw public key of the Registrar: the
pinned-domain-subject-public-key-info in such a voucher, is the raw public
key of the Registrar.
This is described in the YANG definition for the constrained voucher.

# Discovery and URI

This section describes the BRSKI extensions to EST-coaps
{{I-D.ietf-ace-coap-est}} to transport the voucher between registrar,
proxy and pledge over CoAP. The extensions are targeted to low-resource
networks with small packets. Saving header space is important and the
EST-coaps URI is shorter than the EST URI.

The presence and location of (path to) the management data are discovered by
sending a GET request to "/.well-known/core" including a resource type (RT)
parameter with the value "ace.est" {{RFC6690}}. Upon success, the return
payload will contain the root resource of the EST resources. It is up to the
implementation to choose its root resource; throughout this document the
example root resource /est is used.

The EST-coaps server URIs differ from the EST URI by replacing the scheme
https by coaps and by specifying shorter resource path names:

~~~~
  coaps://www.example.com/est/short-name
~~~~

Figure 5 in section 3.2.2 of {{RFC7030}} enumerates the operations and
corresponding paths which are supported by EST. {{est-uri}} provides the
mapping from the BRSKI extension URI path to the EST-coaps URI path.

| BRSKI | EST-coaps |
| /requestvoucher| /rv |
| /voucher_status | /vs |
| /enrollstatus | /es  |
| /requestauditlog | /ra |
{: #est-uri title='BRSKI path to EST-coaps path'}

/requestvoucher, /voucher_status and /enrollstatus are needed between 
pledge and Registrar.

When discovering the root path for the EST resources, the server MAY return
the full resource paths and the used content types. This is useful when
multiple content types are specified for EST-coaps server. For example, the
following more complete response is possible.

~~~~
  REQ: GET /.well-known/core?rt=ace.est*

  RES: 2.05 Content
  </est>; rt="ace.est"
  </est/rv>; rt="ace.est/rv";ct=TBD2 TBD3
  </est/vs>; rt="ace.est/vs";ct=50 60
  </est/es>; rt="ace.est/es";ct=50 60
  </est/ra>; rt="ace.est/ra";ct=TBD2 TBD3
~~~~

The return of the content-types allows the client to choose the most appropriate one from multiple content types.

ct=TBD2 stands for Content-Format "application/voucher-cms+cbor,
and ct=TBD3 stands for Content-Format "application/voucher-cose+cbor".

Content-Formats TBD2 and TBD3 are defined in this document.

The Content-Format ("application/json") 50 MAY be supported.
Content-Formats ("application/cbor") 60, TBD2, and TBD3 MUST be supported.

# Artifacts

This section describes the abstract (tree) definition as explained
in {{I-D.ietf-netmod-yang-tree-diagrams}} first.  This provides a high-level
view of the contents of each artifact.

Then the assigned SID values are presented. These have been assigned using
the rules in {{I-D.ietf-core-sid}}, with an allocation that was made
via the http://comi.space service.

## Voucher Request artifact

### Tree Diagram

The following diagram is largely a duplicate of the contents of {{RFC8366}},
with the addition of proximity-registrar-subject-public-key-info,
proximity-registrar-cert, and prior-signed-voucher-request.

prior-signed-voucher-request is only used between the Registrar and the MASA.
proximity-registrar-subject-public-key-info replaces proximity-registrar-cert
for the extremely constrained cases.

INSERT_FIG_FROM_FILE ietf-constrained-voucher-request-tree.txt END

### SID values

INSERT_FIG_FROM_FILE ietf-constrained-voucher-request-sid.txt END

### YANG Module

In the constrained-voucher-request YANG module, the voucher is "augmented" within the "used" grouping statement such that one continuous set of SID values is generated for the constrained-voucher-request module name, all voucher attributes, and the constrained-voucher-request attribute. Two attributes of the voucher are "refined" to be optional.

INSERT_FIG_FROM_FILE ietf-constrained-voucher-request@DATE.yang END

### Example voucher request artifact {#example2}

Below is a CBOR serialization of the constrained-voucher-request is shown in diagnostic CBOR notation. The enum value of the assertion field is calculated to be zero by following the algorithm described in section 9.6.4.2 of {{RFC7950}}.

INSERT_FIG_FROM_FILE examples/voucher-request-example1.txt END

## Voucher artifact

The voucher's primary purpose is to securely assign a pledge to an
owner.  The voucher informs the pledge which entity it should
consider to be its owner.

This document defines a voucher that is a CBOR encoded instance of
the YANG module defined in Section 5.3 that has been signed with CMS
or with COSE.

### Tree Diagram

The following diagram is largely a duplicate of the contents of {{RFC8366}},
with only the addition of pinned-domain-subject-public-key-info.

INSERT_FIG_FROM_FILE ietf-constrained-voucher-tree.txt END

### SID values

INSERT_FIG_FROM_FILE ietf-constrained-voucher-sid.txt END


### YANG Module

In the constrained-voucher YANG module, the voucher is "augmented" within the "used" grouping statement such that one continuous set of SID values is generated for the constrained-voucher module name, all voucher attributes, and the constrained-voucher attribute. Two attributes of the voucher are "refined" to be optional.

INSERT_FIG_FROM_FILE ietf-constrained-voucher@DATE.yang END

### Example voucher artifacts {#example1}

Below a the CBOR serialization of the constrained-voucher is shown in diagnostic CBOR notation. The enum value of the assertion field is calculated to be zero by following the algorithm described in section 9.6.4.2 of {{RFC7950}}.

INSERT_FIG_FROM_FILE examples/voucher-example1.txt END

The signing of the example is shown in {{cmssign}}.

## Signing voucher and voucher-request artifacts

### CMS signing

The IETF evolution of PKCS#7 is CMS {{RFC5652}}.  The CMS signed voucher is
much like the equivalent voucher defined in {{RFC8366}}.

A different eContentType of TBD1 is used to indicate that the contents are
in a different format than in {{RFC8366}}.

The ContentInfo structure contains a payload consisting of the CBOR encoded
voucher. The {{I-D.ietf-core-yang-cbor}} use of delta encoding creates a
canonical ordering for the keys on the wire.  This canonical ordering is not
important as there is no expectation that the content will be reproduced
during the validation process.

Normally the recipient is the pledge and the signer is the MASA.

{{I-D.ietf-anima-bootstrapping-keyinfra}} supports both signed and unsigned
voucher requests from the pledge to the JRC.
In this specification, voucher-request artifact MUST be signed from the
pledge to the registrar.  From the JRC to the MASA, the voucher-request
artifact MUST be signed by the domain owner key which is requesting
ownership.

The considerations of {{RFC5652}} section 5.1, concerning validating
CMS objects which are really PKCS7 objects (cmsVersion=1) applies.

The CMS structure SHOULD also contain all the certificates leading up
to and including the signer's trust anchor certificate known to the
recipient.  The inclusion of the trust anchor is unusual in many
applications, but without it third parties can not accurately audit
the transaction.

The CMS structure MAY also contain revocation objects for any
intermediate certificate authorities (CAs) between the voucher-issuer
and the trust anchor known to the recipient.  However, the use of
CRLs and other validity mechanisms is discouraged, as the pledge is
unlikely to be able to perform online checks, and is unlikely to have
a trusted clock source.  As described below, the use of short-lived
vouchers and/or pledge provided nonce provides a freshness guarantee.

~~~
[EDnote: compulsory signing algorithms are ......]
~~~

In {{cmssign}} an example for the CMS signing of the voucher-request is shown.

### COSE signing

The COSE-Sign1 structure is discussed in section 4.2 of [RFC8152]. The CBOR
object that carries the body, the signature, and the
information about the body and signature is called the COSE_Sign1
structure. It is used when only one signature is used on the body.
Support for EdDSA with Ed25519 is compulsory.

The supported COSE-sign1 object stucture is shown in {{fig-cose}}.

~~~~
COSE_Sign1(
  [
    h'a10127',        # { "alg": EDdsa }
    {
      “kid” : h'789'  # hash(pblic key)
    },
    h'123', #voucher-request binary content
    h'456', #voucher-request binary public signature
  ]
)
~~~~
{: #fig-cose title='cose-sign1 example' align="left"}

The {{COSE-registry}} specifies the integers that replace the strings and the mnemonics in {{fig-cose}}. The value of the "kid" parameter is an example value. Usually a hash of the public key is used to idientify the public key. The distribution of the public key and its hash is done out of band. 

In {{cosesign}} a binary cose-sign1 object is shown based on the voucher-request example of {{example2}}.

# Design Considerations

The design considerations for the CBOR encoding of vouchers is much the same
as for {{RFC8366}}.

One key difference is that the names of the leaves in the YANG does not have a
material effect on the size of the resulting CBOR, as the SID translation
process assigns integers to the names.

# Security Considerations

## Clock Sensitivity

TBD.

## Protect Voucher PKI in HSM

TBD.

## Test Domain Certificate Validity when Signing

TBD.

# IANA Considerations

## Resource Type Registry

Additions to the sub-registry "CoAP Resource Type", within the "CoRE parameters" registry are specified below. These can be registered  either in the Expert Review range (0-255) or IETF Review range (256-9999).

     ace.rt.rv needs registration with IANA
     ace.rt.vs needs registration with IANA
     ace.rt.es needs registration with IANA
     ace.rt.ra needs registration with IANA

## The IETF XML Registry

This document registers two URIs in the IETF XML registry {{RFC3688}}.
Following the format in {{RFC3688}}, the following registration is
requested:

      URI: urn:ietf:params:xml:ns:yang:ietf-constrained-voucher
      Registrant Contact: The ANIMA WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

      URI: urn:ietf:params:xml:ns:yang:ietf-constrained-voucher-request
      Registrant Contact: The ANIMA WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

## The YANG Module Names Registry

This document registers two YANG modules in the YANG Module Names
registry {{RFC6020}}.  Following the format defined in {{RFC6020}}, the
the following registration is requested:

      name:         ietf-constrained-voucher
      namespace:    urn:ietf:params:xml:ns:yang:ietf-constrained-voucher
      prefix:       vch
      reference:    RFC XXXX

      name:         ietf-constrained-voucher-request
      namespace:    urn:ietf:params:xml:ns:yang:ietf-constrained
                                               -voucher-request
      prefix:       vch
      reference:    RFC XXXX

## The RFC SID range assignment sub-registry

    ------------ ------ --------------------------- ------------
    Entry-point | Size | Module name               | RFC Number
    ------------ ------ --------------------------- ------------
    2450          50     ietf-constrained-voucher    [ThisRFC]
    2500          50     ietf-constrained-voucher    [ThisRFC}
                                     -request
    ----------- ------  --------------------------- ------------

Warning: These SID values are defined in {{I-D.ietf-core-sid}}.

## The SMI Security for S/MIME CMS Content Type Registry

This document registers an OID in the "SMI Security for S/MIME CMS
Content Type" registry (1.2.840.113549.1.9.16.1), with the value:

      Decimal  Description                             References
      -------  --------------------------------------  ----------
      TBD1      id-ct-animaCBORVoucher                 [ThisRFC]

EDNOTE: should a separate value be used for Voucher Requests?



## Media-Type Registry

This section registers the 'application/voucher-cms+cbor' media type and the 'application/voucher-cose+cbor' in the
"Media Types" registry.  These media types are used to indicate that
the content is a CBOR voucher either signed with a cms structure or a COSE_Sign1 structure [RFC8152].

### application/voucher-cms+cbor

    Type name:  application
    Subtype name:  voucher-cms+cbor
    Required parameters:  none
    Optional parameters:  none
    Encoding considerations:  CMS-signed CBOR vouchers are CBOR
      encoded.
    Security considerations:  See Security Considerations, Section
    Interoperability considerations:  The format is designed to be
      broadly interoperable.
    Published specification:  THIS RFC.
    Applications that use this media type:  ANIMA, 6tisch, and other
      zero-touch imprinting systems
    Additional information:
      Magic number(s):  None
      File extension(s):  .vch
      Macintosh file type code(s):  none
    Person & email address to contact for further information:  IETF
      ANIMA WG
    Intended usage:  LIMITED
    Restrictions on usage:  NONE
    Author:  ANIMA WG
    Change controller:  IETF
    Provisional registration? (standards tree only):  NO

### application/voucher-cose+cbor

    Type name:  application
    Subtype name:  voucher-cose+cbor
    Required parameters:  none
    Optional parameters:  cose-type
    Encoding considerations:  COSE_Sign1 CBOR vouchers are COSE objects
                              signed with one signer.
    Security considerations:  See Security Considerations, Section
    Interoperability considerations:  The format is designed to be
      broadly interoperable.
    Published specification:  THIS RFC.
    Applications that use this media type:  ANIMA, 6tisch, and other
      zero-touch imprinting systems
    Additional information:
      Magic number(s):  None
      File extension(s):  .vch
      Macintosh file type code(s):  none
    Person & email address to contact for further information:  IETF
      ANIMA WG
    Intended usage:  LIMITED
    Restrictions on usage:  NONE
    Author:  ANIMA WG
    Change controller:  IETF
    Provisional registration? (standards tree only):  NO

## CoAP Content-Format Registry

Additions to the sub-registry "CoAP Content-Formats", within the "CoRE
Parameters" registry are needed for two media types. These can be registered
either in the Expert Review range (0-255) or IETF Review range (256-9999).

    Media type                    mime type    Encoding   ID  References
    ----------------------------  -----------  --------- ---- ----------
    application/voucher-cms+cbor      - -        CBOR    TBD2  [This RFC]
    application/voucher-cose+cbor "COSE-Sign1"   CBOR    TBD3  [This RFC]


# Acknowledgements

We are very grateful to Jim Schaad for explaining COSE and CMS choices. Also thanks to Jim Schaad for correctinging earlier version of the COSE Sign1 objects.

Michel Veillette did extensive work on pyang to extend it to support the
SID allocation process, and this document was among the first users.

We are grateful for the suggestions done by Esko Dijk.

# Changelog

-06 
    New SID values assigned; regenerated examples

-04
    voucher and request-voucher MUST be signed
    examples for signed request are added in appendix
    IANA SID registration is updated
    SID values in examples are aligned
    signed cms examples aligned with new SIDs

-03

    Examples are inverted.

-02

    Example of requestvoucher with unsigned appllication/cbor is added
    attributes of voucher "refined" to optional
    CBOR serialization of vouchers improved
    Discovery port numbers are specified

-01

    application/json is optional, application/cbor is compulsory
    Cms and cose mediatypes are introduced

--- back

#EST messages to EST-coaps

This section extends the examples from Appendix A of {{I-D.ietf-ace-coap-est}}. The CoAP headers are only worked out for the enrollstatus example.

##enrollstatus {#es}

A coaps enrollstatus message can be :

~~~
    GET coaps://[192.0.2.1:8085]/est/es
~~~

The corresponding coap header fields are shown below.

~~~
  Ver = 1
  T = 0 (CON)
  Code = 0x01 (0.01 is GET)
  Options
   Option  (Uri-Path)
     Option Delta = 0xb   (option nr = 11)
     Option Length = 0x3
     Option Value = "est"
   Option  (Uri-Path)
     Option Delta = 0x0   (option nr = 11)
     Option Length = 0x2
     Option Value = "es"
  Payload = [Empty]
~~~

The Uri-Host and Uri-Port Options are omitted because they coincide with the transport protocol destination address and port respectively.

A 2.05 Content response with an unsigned voucher status (ct=60) will then be:

~~~
   2.05 Content (Content-Format: application/cbor)
~~~

With CoAP fields and payload:

~~~
   Ver=1
   T=2 (ACK)
   Code = 0x45 (2.05 Content)
   Options
     Option1 (Content-Format)
     Option Delta = 0xC  (option nr 12)
     Option Length = 0x2
     Option Value = 60 (application/cbor)

     Payload (CBOR diagnostic) =
     {
     "version":"1",
     "Status": 1,   / 1 = Success, 0 = Fail  /
     "Reason":"Informative human readable message",
     "reason-context": "Additional information"
     }
~~~

 The binary payload is:

~~~
     A46776657273696F6E6131665374617475730166526561736F6E7822
     496E666F726D61746976652068756D616E207265616461626C65206D
     6573736167656e726561736F6E2D636F6E74657874
     764164646974696F6E616C20696E666F726D6174696F6E
~~~

The binary payload disassembles to the above CBOR diagnostic code.

##voucher_status

A coaps voucher_status message can be:

~~~~
   GET coaps://[2001:db8::2:1]:61616]/est/vs
~~~~

A 2.05 Content response with a non signed CBOR voucher status (ct=60) will then be:

~~~~
    2.05 Content (Content-Format: application/cbor)
    Payload =
    A46776657273696F6E6131665374617475730166526561736F6E7822
    496E666F726D61746976652068756D616E207265616461626C65206D
    6573736167656e726561736F6E2D636F6E74657874
    764164646974696F6E616C20696E666F726D6174696F6E
~~~~

##requestvoucher

Signed request-voucher-request payloads are sent from pledge to Registrar, as explained in Section 5.2 of {{I-D.ietf-anima-bootstrapping-keyinfra}}.

### signed requestvoucher {#rv}

A CMS signed requestvoucher message from JRC to MASA is shown below.
It would be CoAP POSTED to /est/rv.

~~~~
    POST coaps://[2001:db8::2:1]:61616]/est/rv
    (Content-Format: application/voucher-cms+cbor)
~~~~

The payload would be in binary, but is presented in base64 in this document.

INSERT_FIG_FROM_FILE examples/cms-parboiled-request.b64 END

A 2.04 Changed response returning CBOR voucher signed with a cms structure(ct=TBD2) will then be:

~~~~
    2.04 Changed (Content-Format: application/voucher-cms+cbor)
~~~~
INSERT_FIG_FROM_FILE examples/cms-voucher2.b64 END

##requestauditing  {#ra}

A coaps requestauditing message contains the signed CBOR voucher :

~~~~
    POST coaps://[2001:db8::2:1]:61616]/est/ra
    (Content-Format: application/voucher-cms+cbor)
    Payload =
TO BE FILLED
~~~~

A 2.05 Content response returning a log of the voucher (ct=60) will then be:

~~~~
    2.05 Content (Content-Format: application/cbor)
    Payload =
{
 "version":"1",
 "events":[
   {
    "date":"<date/time of the entry>",
    "domainID":"<domainID extracted from voucher-request>",
    "nonce":"<any nonce if supplied (or the exact string 'NULL')>"
    "assertion":"<the value from the voucher assertion leaf>"
    "truncated":"<the number of domainID entries truncated>"
   },
   {
    "date":"<date/time of the entry>",
    "domainID":"<anotherDomainID extracted from voucher-request>",
    "nonce":"<any nonce if supplied (or the exact string 'NULL')>"
    "assertion":"<the value from the voucher assertion leaf>"
   }
 ],
  "truncation": {
    "nonced duplicates": "<total number of entries truncated>",
    "nonceless duplicates": "<total number of entries truncated>",
    "arbitrary": "<number of domainID entries removed entirely>"
  }
}

    [EDNOTE: Change JSON to CBOR; Serialize CBOR payload to binary]
~~~~

# Signed voucher-request examples

## CMS signed voucher-request example   {#cmssign}

The voucher-request example, visualized in CBOR diagnostic notation in {{example2}} is shown as a hexadecimal dump of the binary file.

~~~
    a11909c5a90274323031362d31302d30375431393a33313a34325a0474323031
    362d31302d32315431393a33313a34325a01020d6d4a414441313233343536
    373839054401020d0f0a4401020d0f03f50674323031372d31302d30375431
    393a33313a34325a0c4401020d0f 
~~~

The voucher-request example has been signed by using the WT1234 certificate and key pair shown in Appendix C of {{I-D.ietf-ace-coap-est}}.
The CMS signing of the binary voucher-request leads to a binary signed voucher-request, shown with a hexadecimal representation shown in the payload of the request part of {{rv}} and {{ra}}.

The breakdown of the CMS signed binary voucher-request file is visualized below:

~~~
CMS_ContentInfo:
  contentType: pkcs7-signedData (1.2.840.113549.1.7.2)
  d.signedData:
    version: 1
    digestAlgorithms:
        algorithm: sha256 (2.16.840.1.101.3.4.2.1)
        parameter: <ABSENT>
    encapContentInfo:
      eContentType: pkcs7-data (1.2.840.113549.1.7.1)
      eContent: <ABSENT>
    certificates:
      d.certificate:
        cert_info:
          version: 2
          serialNumber: 9112578475118446130
          signature:
            algorithm: ecdsa-with-SHA256 (1.2.840.10045.4.3.2)
            parameter: <ABSENT>
          issuer: C=US, ST=CA, O=Example Inc, OU=certification,
                                                  CN=802.1AR CA
          validity:
            notBefore: Jan 31 11:29:16 2019 GMT
            notAfter: Dec 31 23:59:59 9999 GMT
          subject: C=US, ST=CA, L=LA, O=example Inc,
                                     OU=IoT/serialNumber=Wt1234
          key:
            algor:
              algorithm: id-ecPublicKey (1.2.840.10045.2.1)
              parameter: OBJECT:prime256v1 (1.2.840.10045.3.1.7)
            public_key:  (0 unused bits)
              0000 - 04 c8 b4 21 f1 1c 25 e4-7e 3a c5 71 23 bf
              000e - 2d 9f dc 49 4f 02 8b c3-51 cc 80 c0 3f 15
              001c - 0b f5 0c ff 95 8d 75 41-9d 81 a6 a2 45 df
              002a - fa e7 90 be 95 cf 75 f6-02 f9 15 26 18 f8
              0038 - 16 a2 b2 3b 56 38 e5 9f-d9
          issuerUID: <ABSENT>
          subjectUID: <ABSENT>
          extensions:
              object: X509v3 Basic Constraints (2.5.29.19)
              critical: BOOL ABSENT
              value:
                0000 - 30
                0002 - <SPACES/NULS>

              object: X509v3 Subject Key Identifier (2.5.29.14)
              critical: BOOL ABSENT
              value:
                0000 - 04 14 96 60 0d 87 16 bf-7f d0 e7 52 d0
                000d - ac 76 07 77 ad 66 5d 02-a0

              object: X509v3 Authority Key Identifier (2.5.29.35)
              critical: BOOL ABSENT
              value:
                0000 - 30 16 80 14 68 d1 65 51-f9 51 bf c8 2a
                000d - 43 1d 0d 9f 08 bc 2d 20-5b 11 60

              object: X509v3 Key Usage (2.5.29.15)
              critical: TRUE
              value:
                0000 - 03 02 05 a0

              object: X509v3 Subject Alternative Name (2.5.29.17)
              critical: BOOL ABSENT
              value:
                0000 - 30 21 a0 1f 06 08 2b 06-01 05 05 07 08
                000d - 04 a0 13 30 11 06 09 2b-06 01 04 01 b4
                001a - 3b 0a 01 04 04 01 02 03-04
        sig_alg:
          algorithm: ecdsa-with-SHA256 (1.2.840.10045.4.3.2)
          parameter: <ABSENT>
        signature:  (0 unused bits)
          0000 - 30 46 02 21 00 c0 d8 19-96 d2 50 7d 69 3f 3c
          000f - 48 ea a5 ee 94 91 bd a6-db 21 40 99 d9 81 17
          001e - c6 3b 36 13 74 cd 86 02-21 00 a7 74 98 9f 4c
          002d - 32 1a 5c f2 5d 83 2a 4d-33 6a 08 ad 67 df 20
          003c - f1 50 64 21 18 8a 0a de-6d 34 92 36
    crls:
      <EMPTY>
    signerInfos:
        version: 1
        d.issuerAndSerialNumber:
          issuer: C=US, ST=CA, O=Example Inc, OU=certification,
                                                  CN=802.1AR CA
          serialNumber: 9112578475118446130
        digestAlgorithm:
          algorithm: sha256 (2.16.840.1.101.3.4.2.1)
          parameter: <ABSENT>
        signedAttrs:
            object: contentType (1.2.840.113549.1.9.3)
            value.set:
              OBJECT:pkcs7-data (1.2.840.113549.1.7.1)

            object: signingTime (1.2.840.113549.1.9.5)
            value.set:
              UTCTIME:Jul  3 08:53:30 2019 GMT

            object: messageDigest (1.2.840.113549.1.9.4)
            value.set:
              OCTET STRING:
                0000 - d4 b0 5c dd c8 b4 91 28-4a 18 ca 25 9d
                000d - be d0 60 23 cf ad a0 aa-c2 95 ac e9 3f
                001a - 0b 4f 44 9e 25
                0020 - <SPACES/NULS>
        signatureAlgorithm:
          algorithm: ecdsa-with-SHA256 (1.2.840.10045.4.3.2)
          parameter: <ABSENT>
        signature:
          0000 - 30 46 02 21 00 e5 e1 7f-23 c3 aa 14 9f 35 64
          000f - 1e c4 4a 0f 68 fe b0 16-3b e6 7c 06 51 af bf
          001e - 5a a0 99 59 e0 28 1f 02-21 00 b4 07 2f 7c c4
          002d - f9 26 0c 6d 47 a7 93 56-de b8 da f7 23 f0 af
          003c - 2b 59 16 cc 36 63 e7 91-89 39 df df
        unsignedAttrs:
          <EMPTY>
~~~

# COSE examples {#cosesign}

These examples are from the https://minerva.sandelman.ca/ reference code,
using the unit test case key pairs, with a flow between pledge ("reach"
code), JRC ("fountain") code, and MASA ("highway") code.  This example
comes from the spec/files/product/00-D0-E5-F2-00-03 directory.



## Device, Registrar and MASA keys

This first section documents the public and private keys used in the
subsequent test vectors below.  These keys come from test code and are not used in any
production system, and should only be used only to validate implementations.

### Device IDevID certificate

INSERT_FIG_FROM_FILE examples/device_00-D0-E5-F2-00-03.crt-txt END

### Device private key

INSERT_FIG_FROM_FILE examples/key_00-D0-E5-F2-00-03.pem END

### Registrar Certificate

INSERT_FIG_FROM_FILE examples/jrc-fountain-test.crt END

### Registrar private key {#jrcpriv}

INSERT_FIG_FROM_FILE examples/jrc-fountain-test.pem END

### MASA Certificate

INSERT_FIG_FROM_FILE examples/masa_prime256v1.crt END

### MASA private key {#masapriv}

INSERT_FIG_FROM_FILE examples/masa_prime256v1.key END


## COSE signed requestvoucher with registrar certificate pinned

~~~
EDNote: These examples do not parse
~~~

This voucher request has been signed by the pledge, and has been sent to the JRC over CoAPS.  This example
uses the proximity-registrar-cert mechanism to request a voucher that
pins the certificate of the registrar.

This is the CBOR diagnostic format, folded to 60 characters:

INSERT_FIG_FROM_FILE examples/vr_00-D0-E5-F2-00-03.diag END

This is the raw binary, shown as hex dump:

INSERT_FIG_FROM_FILE examples/vr_00-D0-E5-F2-00-03.b64 END

## COSE signed parboiled requestvoucher

~~~
These example do not parse
~~~~

This voucher request has been signed by the JRC using the private key from
{{jrcpriv}}.  Contained within this voucher request is the pledge voucher
request above.

This is the CBOR diagnostic format, folded to 60 characters:

INSERT_FIG_FROM_FILE examples/parboiled_vr_00-D0-E5-F2-00-03.diag END

This is the raw binary, encoded in base64:

INSERT_FIG_FROM_FILE examples/parboiled_vr_00-D0-E5-F2-00-03.b64 END

## COSE signed voucher

The resulting voucher is created by the MASA and returned via the JRC to the
Pledge.  It is signed by the MASA's private key {{masapriv}} and can be
verified by the pledge using the MASA's publie key.

This is the CBOR diagnostic format, folded to 60 characters:

INSERT_FIG_FROM_FILE examples/voucher_00-D0-E5-F2-00-03.diag END

This is the raw binary, encoded in base64:

INSERT_FIG_FROM_FILE examples/voucher_00-D0-E5-F2-00-03.b64 END

## COSE signed request voucher

The headecimal dump of request-voucher shown in {{cmssign}} is used for this example. The cose sign1 object of {{fig-cose}} provides the structure of the cose sign1 example.  To identify the public key a hash of the public key is made using murmur3 with seed 42.

~~~
public key:
84 44 de 3a b7 b5 a0 2f 20 ed e7 80 1a f0 76 d6 52 0a e5 c8 a1
04 41 61 b2 64 57 fe 0e ae 08 4d

murmur3 hash of public key: 0x4727e669  or  1193797225
~~~

Using the values "kid" = 4, EDdsa = -8, "alg" = 2, COSE_Sign1 = 18, and using the murmur3 hash value for the "kid" parameter, the CBOR object is:

~~~
18([h'A10127', {4: 1193797225},
  h'A11909C5A90274323031362D31302D30375431393A33313A34325A04743
  23031362D31302D32315431393A33313A34325A01020D6D4A414441313233
  343536373839054401020D0F0A4401020D0F03F50674323031372D31302D3
  0375431393A33313A34325A0C4401020D0F',
h'955D82A26B7C0869EE8FE5A09EE3D68DDFFE8FE39E3BCADFA80F2F9A6E13F
  F0349A2CA131C8F6A9AAF7780BAB671F63CBB158EC17322323C1AB82B1CDC
  B62A06'])
~~~ 

The corresponding hexadecimal dump is:

~~~
  d28443a10127a1041a4727e669586ca11909c5a90274323031362d31302d
  30375431393a33313a34325a0474323031362d31302d32315431393a3331
  3a34325a01020d6d4a414441313233343536373839054401020d0f0a4401
  020d0f03f50674323031372d31302d30375431393a33313a34325a0c4401
  020d0f5840955d82a26b7c0869ee8fe5a09ee3d68ddffe8fe39e3bcadfa8
  0f2f9a6e13ff0349a2ca131c8f6a9aaf7780bab671f63cbb158ec1732232
  3c1ab82b1cdcb62a06
~~~

